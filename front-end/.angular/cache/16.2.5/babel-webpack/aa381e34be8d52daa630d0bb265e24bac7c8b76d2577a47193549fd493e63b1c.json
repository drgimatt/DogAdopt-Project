{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Country } from '../model/country';\nexport let ShowCountryComponent = class ShowCountryComponent {\n  constructor(countryService, route, router, fb) {\n    this.countryService = countryService;\n    this.route = route;\n    this.router = router;\n    this.fb = fb;\n    this.country = new Country();\n    this.countryForm = this.fb.group({\n      name: '',\n      language: ''\n    });\n  }\n  ngOnInit() {\n    this.route.params.forEach(params => {\n      if (params['id'] !== undefined) {\n        const id = params['id'];\n        this.countryService.getCountry(id).subscribe(data => {\n          this.country = data;\n        });\n      }\n    });\n  }\n  executeDeleteFunction() {\n    this.route.params.forEach(params => {\n      if (params['id'] !== undefined) {\n        const id = params['id'];\n        this.countryService.deleteCountry(id).subscribe(data => {\n          this.country = data;\n        });\n        this.router.navigate(['/countries']);\n        window.location.reload();\n      }\n    });\n  }\n  executeUpdateFunction() {\n    const Country = this.countryForm.value;\n    this.route.params.forEach(params => {\n      if (params['id'] !== undefined) {\n        const id = params['id'];\n        this.countryService.deleteCountry(id).subscribe(data => {\n          this.country = data;\n        });\n        this.router.navigate(['/countries']);\n        window.location.reload();\n      }\n    });\n  }\n};\nShowCountryComponent = __decorate([Component({\n  selector: 'app-show-country',\n  templateUrl: './show-country.component.html',\n  styleUrls: ['./show-country.component.css']\n})], ShowCountryComponent);","map":{"version":3,"names":["Component","Country","ShowCountryComponent","constructor","countryService","route","router","fb","country","countryForm","group","name","language","ngOnInit","params","forEach","undefined","id","getCountry","subscribe","data","executeDeleteFunction","deleteCountry","navigate","window","location","reload","executeUpdateFunction","value","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\boxro\\OneDrive - MapÃºa University\\Year 3\\IT192\\Module 3\\Outputs\\Project\\front-end\\src\\app\\show-country\\show-country.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Country } from '../model/country';\nimport { CountryService } from '../service/country-service';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-show-country',\n  templateUrl: './show-country.component.html',\n  styleUrls: ['./show-country.component.css']\n})\nexport class ShowCountryComponent implements OnInit {\n\n  countryForm: FormGroup;\n  country: Country = new Country()\n\n  constructor(private countryService: CountryService, private route: ActivatedRoute, private router : Router, private fb: FormBuilder) {\n    this.countryForm = this.fb.group({\n      name: '',\n      language: ''\n    });\n   }\n\n\n  ngOnInit(): void {\n    this.route.params.forEach((params: Params) => {\n      if (params['id'] !== undefined) {\n        const id = params['id'];\n        this.countryService.getCountry(id).subscribe(data => { this.country = data });\n      }\n    });\n  }\n\n  executeDeleteFunction(): void {\n    this.route.params.forEach((params: Params) => {\n      if (params['id'] !== undefined) {\n        const id = params['id'];\n        this.countryService.deleteCountry(id).subscribe(data => { this.country = data });\n        this.router.navigate(['/countries']);\n        window.location.reload();\n      }\n      \n    });    \n  }\n\n  executeUpdateFunction(): void {\n\n    const Country = this.countryForm.value;\n\n\n    this.route.params.forEach((params: Params) => {\n      if (params['id'] !== undefined) {\n        const id = params['id'];\n        this.countryService.deleteCountry(id).subscribe(data => { this.country = data });\n        this.router.navigate(['/countries']);\n        window.location.reload();\n      }\n      \n    });    \n  }\n\n\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAASC,OAAO,QAAQ,kBAAkB;AASnC,WAAMC,oBAAoB,GAA1B,MAAMA,oBAAoB;EAK/BC,YAAoBC,cAA8B,EAAUC,KAAqB,EAAUC,MAAe,EAAUC,EAAe;IAA/G,KAAAH,cAAc,GAAdA,cAAc;IAA0B,KAAAC,KAAK,GAALA,KAAK;IAA0B,KAAAC,MAAM,GAANA,MAAM;IAAmB,KAAAC,EAAE,GAAFA,EAAE;IAFtH,KAAAC,OAAO,GAAY,IAAIP,OAAO,EAAE;IAG9B,IAAI,CAACQ,WAAW,GAAG,IAAI,CAACF,EAAE,CAACG,KAAK,CAAC;MAC/BC,IAAI,EAAE,EAAE;MACRC,QAAQ,EAAE;KACX,CAAC;EACH;EAGDC,QAAQA,CAAA;IACN,IAAI,CAACR,KAAK,CAACS,MAAM,CAACC,OAAO,CAAED,MAAc,IAAI;MAC3C,IAAIA,MAAM,CAAC,IAAI,CAAC,KAAKE,SAAS,EAAE;QAC9B,MAAMC,EAAE,GAAGH,MAAM,CAAC,IAAI,CAAC;QACvB,IAAI,CAACV,cAAc,CAACc,UAAU,CAACD,EAAE,CAAC,CAACE,SAAS,CAACC,IAAI,IAAG;UAAG,IAAI,CAACZ,OAAO,GAAGY,IAAI;QAAC,CAAC,CAAC;;IAEjF,CAAC,CAAC;EACJ;EAEAC,qBAAqBA,CAAA;IACnB,IAAI,CAAChB,KAAK,CAACS,MAAM,CAACC,OAAO,CAAED,MAAc,IAAI;MAC3C,IAAIA,MAAM,CAAC,IAAI,CAAC,KAAKE,SAAS,EAAE;QAC9B,MAAMC,EAAE,GAAGH,MAAM,CAAC,IAAI,CAAC;QACvB,IAAI,CAACV,cAAc,CAACkB,aAAa,CAACL,EAAE,CAAC,CAACE,SAAS,CAACC,IAAI,IAAG;UAAG,IAAI,CAACZ,OAAO,GAAGY,IAAI;QAAC,CAAC,CAAC;QAChF,IAAI,CAACd,MAAM,CAACiB,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;QACpCC,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAE;;IAG5B,CAAC,CAAC;EACJ;EAEAC,qBAAqBA,CAAA;IAEnB,MAAM1B,OAAO,GAAG,IAAI,CAACQ,WAAW,CAACmB,KAAK;IAGtC,IAAI,CAACvB,KAAK,CAACS,MAAM,CAACC,OAAO,CAAED,MAAc,IAAI;MAC3C,IAAIA,MAAM,CAAC,IAAI,CAAC,KAAKE,SAAS,EAAE;QAC9B,MAAMC,EAAE,GAAGH,MAAM,CAAC,IAAI,CAAC;QACvB,IAAI,CAACV,cAAc,CAACkB,aAAa,CAACL,EAAE,CAAC,CAACE,SAAS,CAACC,IAAI,IAAG;UAAG,IAAI,CAACZ,OAAO,GAAGY,IAAI;QAAC,CAAC,CAAC;QAChF,IAAI,CAACd,MAAM,CAACiB,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;QACpCC,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAE;;IAG5B,CAAC,CAAC;EACJ;CAGD;AAnDYxB,oBAAoB,GAAA2B,UAAA,EALhC7B,SAAS,CAAC;EACT8B,QAAQ,EAAE,kBAAkB;EAC5BC,WAAW,EAAE,+BAA+B;EAC5CC,SAAS,EAAE,CAAC,8BAA8B;CAC3C,CAAC,C,EACW9B,oBAAoB,CAmDhC"},"metadata":{},"sourceType":"module","externalDependencies":[]}